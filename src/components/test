<template>
  <div>
    <v-btn @click="dialog = true">글쓰기</v-btn>

    <!-- 팁 목록 표시 -->
    <v-row class="tip-list">
      <v-col v-for="tip in tips" :key="tip.id" cols="10" md="10" class="tip-item">
        <v-card style="width: 100%;">
          <v-card-title>
            <thead>
            <v-img
                :src="tip.imageUrl"
                max-height="80px"
                max-width="80px"
                class="my-3"
                @click="showTipDetail(tip.id)"
            ></v-img>
            <tr style="font-weight: bolder;">
              <td style="width:90%; font-size: small;" @click="showTipDetail(tip.id)">{{ tip.title }} </td>
              <td style="width:10%; font-size: small;">{{ tip.username }}</td>
            </tr>
            <v-icon right>mdi-account</v-icon> {{ tip.username }}
            </thead>

          </v-card-title>

          <v-card-actions>
            <v-btn>
              <v-icon right color = "red">mdi-heart</v-icon> {{ tip.likeCount }}
            </v-btn>
            <v-btn>
              <v-icon right color = "grey">mdi-comment-outline</v-icon> {{ tip.commentCount }}
            </v-btn>
          </v-card-actions>
        </v-card>
      </v-col>
    </v-row>



    <!-- 팁 상세 정보를 보여주는 모달 -->
    <v-dialog v-model="tipDetailDialog" max-width="900px">
      <v-card>
        <v-row>
          <!-- Left side: tip Detail -->
          <v-col cols="6">
            <v-card-title>
              {{ tipDetail.username }}
              <v-card-actions class="d-flex justify-end">
                <!-- 팁 수정 -->
                <v-btn icon @click="openEditTipModal">
                  <v-icon>mdi-pencil</v-icon>
                </v-btn>
                <!-- 팁 삭제 -->
                <v-btn icon @click="deleteTip(tipDetail.id)">
                  <v-icon color="red">mdi-delete</v-icon>
                </v-btn>
              </v-card-actions>
            </v-card-title>
            <v-img :src="tipDetail.imageUrl" max-height="300px" class="my-3 detailed-image"></v-img>
            <v-card-subtitle>{{ tipDetail.title }}</v-card-subtitle>
            <v-card-text>{{ tipDetail.content }}</v-card-text>
            <!-- 좋아요 버튼 -->
            <v-btn color="primary" class="mt-3" @click="postLike(tipDetail.id)">
              <v-icon left>mdi-heart</v-icon> 좋아요 {{ tipDetail.likeCount }}
            </v-btn>
          </v-col>

          <!-- Right side: Comments Section -->
          <v-col cols="6">
            <v-divider></v-divider>
            <v-list dense>
              <v-list-item-group v-for="comment in tipDetail.comments" :key="comment.id">
                <v-list-item-content class="comment-item">
                  <v-list-item-title>
                    <v-icon small left>mdi-account-outline</v-icon>
                    {{ comment.username }}
                    <v-btn icon small @click="startEditingComment(comment.id, comment.content)">
                      <v-icon>mdi-pencil-circle</v-icon>
                    </v-btn>
                    <v-btn icon small class="ml-auto" @click="deleteComment(comment.id)">
                      <v-icon color="red">mdi-close</v-icon>
                    </v-btn>
                  </v-list-item-title>
                  <v-list-item-subtitle>{{ comment.content }}</v-list-item-subtitle>
                </v-list-item-content>
                <v-divider></v-divider>
              </v-list-item-group>
            </v-list>

            <v-textarea
                v-if="editingCommentId"
                label="댓글을 편집해 주세요"
                v-model="newCommentContent"
                class="mt-3"
                rows="2"
            ></v-textarea>
            <v-btn v-if="editingCommentId" text color="primary" @click="editComment">저장</v-btn>

            <v-textarea
                v-else
                label="댓글을 작성해 주세요"
                v-model="newCommentContent"
                class="mt-3"
                rows="2"
            ></v-textarea>
            <v-btn text color="primary" @click="postComment(tipDetail.id)">확인</v-btn>
          </v-col>
        </v-row>

        <!-- 팁 수정을 위한 모달 -->
        <v-dialog v-model="editTipDialog" max-width="600px">
          <v-card>
            <v-card-title>팁 수정</v-card-title>
            <v-card-text>
              <v-text-field
                  label="제목을 수정하세요"
                  v-model="editTitle"
              ></v-text-field>

              <v-textarea
                  label="내용을 수정하세요"
                  v-model="editContent"
                  rows="3"
                  auto-grow
              ></v-textarea>

              <v-file-input label="사진 변경" accept="image/*" v-model="editSelectedImage"></v-file-input>
            </v-card-text>
            <v-card-actions>
              <v-btn text @click="editTipDialog = false">취소</v-btn>
              <v-btn text color="primary" @click="editTip">수정</v-btn>
            </v-card-actions>
          </v-card>
        </v-dialog>

        <!-- Close Button -->
        <v-card-actions>
          <v-btn text @click="tipDetailDialog = false">닫기</v-btn>
        </v-card-actions>
      </v-card>
    </v-dialog>

    <!-- Vuetify의 v-dialog를 사용한 모달 -->
    <v-dialog v-model="dialog" max-width="600px">
      <v-card>
        <v-card-title>사진 업로드</v-card-title>
        <v-card-text>
          <!-- 제목 입력 -->
          <v-text-field
              label="제목을 입력하세요"
              v-model="title"
          ></v-text-field>

          <!-- 설명 입력 -->
          <v-textarea
              label="내용을 입력하세요"
              v-model="content"
              rows="3"
              auto-grow
          ></v-textarea>

          <!-- 사진 선택 -->
          <v-file-input label="사진 등록" accept="image/*" v-model="selectedImage"></v-file-input>
        </v-card-text>
        <v-card-actions>
          <v-btn text @click="dialog = false">취소</v-btn>
          <v-btn text color="primary" @click="uploadImage">업로드</v-btn>
        </v-card-actions>
      </v-card>
    </v-dialog>
  </div>
</template>

<script>
import axios from "@/axios/axios-instance";
import AWS from 'aws-sdk';


export default {
  name: "TipBoard",
  data() {
    return {
      dialog: false,
      tipDetailDialog: false,
      title: '',
      content: '',
      selectedImage: null,
      tips: [],  // 팁 목록 저장용
      tipDetail: {},  // 선택된 팁의 상세 정보
      newCommentContent: '', // 사용자가 작성할 댓글 내용
      editingCommentId: null, // 현재 수정 중인 댓글의 ID
      editTipDialog: false,
      editTitle: '',
      editContent: '',
      editSelectedImage: null
    };
  },
  methods: {
    // S3에 사진 업로드
    async uploadImageToS3(file) {
      AWS.config.update({
        accessKeyId: process.env.VUE_APP_AWS_ACCESS_KEY,
        secretAccessKey: process.env.VUE_APP_AWS_SECRET_KEY,
        region: process.env.VUE_APP_AWS_REGION,
      });
      const s3 = new AWS.S3();
      const params = {
        Bucket: process.env.VUE_APP_AWS_BUCKET,
        Key: file.name, // 파일 이름
        Body: file, // 실제 파일 객체
        ACL: 'public-read' // 파일이 공개적으로 읽을 수 있도록 설정
      };

      try {
        const result = await s3.upload(params).promise();
        return result.Location; // 업로드된 이미지의 URL 반환
      } catch (error) {
        console.error("S3 Upload Error:", error);
      }
    },

    // tip 생성 및 백에 request 전달
    async uploadImage() {
      if (this.selectedImage) {
        const imageUrl = await this.uploadImageToS3(this.selectedImage);
        const data = {
          title: this.title,
          content: this.content,
          imageUrl: imageUrl // S3에서 반환한 URL
        };
        try {
          const response = await axios.post("/tips", data);
          // 서버에서 반환된 새로운 팁 데이터를 클라이언트의 상태에 추가
          this.tips.push(response.data);
          this.dialog = false;
        } catch (error) {
          alert(error.response.data);
        }
      }
    },

    // 전체 팁 불러오기
    async fetchTips() {
      try {
        const response = await axios.get("/tips");
        this.tips = response.data;
      } catch (error) {
        console.error("Error fetching tips:", error);
      }
    },

    // 상세 팁 불러오기
    async showTipDetail(id) {
      try {
        const response = await axios.get(`/tips/${id}`);
        this.tipDetail = response.data;
        this.tipDetailDialog = true; // 모달 열기
      } catch (error) {
        console.error("Error fetching tip detail:", error);
      }
    },

    // 댓글 작성
    async postComment(tipId) {
      // 댓글 내용이 없는 경우
      if (!this.newCommentContent.trim()) {
        alert('댓글 내용을 입력해주세요.');
        return;
      }
      const data = {
        content: this.newCommentContent,
      };
      try {
        const response = await axios.post(`/comments/${tipId}`, data);
        const newComment = {
          content: this.newCommentContent,
          username: response.data.username
        };
        this.tipDetail.comments.push(newComment);
        this.newCommentContent = ''; // 댓글 입력 초기화
        this.fetchTips(); // 컴포넌트가 생성될 때 팁 로드
      } catch (error) {
        console.error("Error posting comment:", error);
        alert('댓글 작성 중 오류가 발생했습니다. 다시 시도해 주세요.');
      }
    },

    // tip 좋아요
    async postLike(tipId) {
      try {
        const response = await axios.post(`/tips/${tipId}/likes`);
        // 직접 likeCount 증가 or 감소
        if (response.data.msg === "성공") {
          this.tipDetail.likeCount += 1;
          this.fetchTips(); // 컴포넌트가 생성될 때 팁 로드
        }
        else if (response.data.msg === "취소") {
          this.tipDetail.likeCount -= 1;
          this.fetchTips(); // 컴포넌트가 생성될 때 팁 로드
        }
        else {
          alert(response.data.msg);
        }
        // this.showtipDetail(tipId);  // 좋아요 후 팁 상세 정보 다시 로드
      } catch (error) {
        alert('좋아요 중 오류가 발생했습니다. 다시 시도해 주세요.');
      }
    },

    // 팁 수정 모달 열기
    openEditTipModal() {
      this.editTipDialog = true;
      this.editTitle = this.tipDetail.title;
      this.editContent = this.tipDetail.content;
    },

    // 팁 수정 로직
    async editTip() {
      if (this.editSelectedImage) {
        const imageUrl = await this.uploadImageToS3(this.editSelectedImage);
        const data = {
          title: this.editTitle,
          content: this.editContent,
          imageUrl: imageUrl
        };
        try {
          const response = await axios.put(`/tips/${this.tipDetail.id}`, data);
          if (response.data.statusCode === 200) {
            this.tipDetail = response.data;
            this.fetchTips(); // 팁 목록 갱신
            this.editTipDialog = false;
            this.tipDetailDialog = false; // 모달 열기
          }
          else {
            alert(response.data.msg);
          }
        } catch (error) {
          alert('팁 수정 중 오류가 발생했습니다. 다시 시도해 주세요.');
        }
      }
    },

    // tip 삭제
    async deleteTip(tipId) {
      try {
        const response = await axios.delete(`/tips/${tipId}`);
        if (response.data.statusCode === 200) {
          this.tipDetailDialog = false;
          this.tips = this.tips.filter(tip => tip.id !== tipId); // 목록에서 해당 팁 제거
        }
        else {
          alert(response.data.msg);
          this.tipDetailDialog = false;
        }
      } catch (error) {
        alert('팁 삭제 중 오류가 발생했습니다. 다시 시도해 주세요.');
      }
    },

    // 댓글 삭제
    async deleteComment(commentId) {
      try {
        const response = await axios.delete(`/comments/${commentId}`);
        if (response.data.statusCode === 200) {
          this.tipDetail.comments = this.tipDetail.comments.filter(comment => comment.id !== commentId);
        }
        else {
          alert(response.data.msg);
        }
      } catch (error) {
        alert('댓글 삭제 중 오류가 발생했습니다. 다시 시도해 주세요.');
      }
    },

    // 댓글 수정 모드 시작
    startEditingComment(id, content) {
      this.editingCommentId = id;
      this.newCommentContent = content;
    },

    // 댓글 수정 완료 및 서버에 전송
    async editComment() {
      if (!this.newCommentContent.trim()) {
        alert('댓글 내용을 입력해주세요.');
        return;
      }

      const data = {
        content: this.newCommentContent,
      };

      try {
        const response = await axios.put(`/comments/${this.editingCommentId}`, data);
        if (response.data.statusCode === 200) {
          const comment = this.tipDetail.comments.find(comment => comment.id === this.editingCommentId);
          if (comment) {
            // 찾은 댓글의 content 값을 수정하여 업데이트
            comment.content = this.newCommentContent;
          }
        }
        else {
          alert(response.data.msg);
        }
        this.editingCommentId = null; // 수정 모드 종료
        this.newCommentContent = ''; // 댓글 입력 초기화
      } catch (error) {
        console.error("Error editing comment:", error);
        alert('댓글 수정 중 오류가 발생했습니다. 다시 시도해 주세요.');
      }
    },
  },
  created() {
    this.fetchTips(); // 컴포넌트가 생성될 때 팁을 로드
  }
}
</script>

<style scoped>
.tip-list {
  margin: 20px 0;
}

.tip-item {
  margin-bottom: 60px;
  padding: 10px;
  height: 100px;
}

.tip-item:hover {
  transform: translateY(-5px);
  box-shadow: 0 6px 12px rgba(0,0,0,0.15);
}

.detailed-image {
  border-radius: 10px;
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.comment-item {
  padding: 10px 0;
}

.comment-item > .v-list-item__title > .v-icon {
  color: #777;
}
</style>
